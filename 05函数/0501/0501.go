/*
函数：是组织好的、可重复使用的、用来实现单一或相关联功能的代码段。Go语言支持普通函数、匿名函数和闭包。Go语言的函数属于“一等公民”，换言之：
	1. 函数本身可以作为值进行传递
	2. 支持匿名函数和闭包
	3. 函数可以满足接口
函数的声明：一个函数的声明包括参数和函数名等。
	普通函数的声明形式：
		func 函数名(参数列表)(返回值列表){
			函数体
		}
	参数类型的简写
		在参数列表中，如果有多个参数变量，则以都好隔开，如果相邻变量是同类型，则可以将类型省略。
			func add(a,b int) int{
				return a+b
			}
	函数的返回值
		Go语言支持多返回值，多返回值能方便获得函数执行后的多个返回参数。Go语言经常使用多返回值中的最后一个返回参数返回函数执行中可能发生的错误。
			conn,err :=connectToNetwork() //conn表示连接对象， err返回错误
		同一种类型返回值：
			如果返回值是同一种类型，则用括号将多个返回值类型括起来，用逗号分隔每个返回值的类型，使用return语句返回时，值列表的顺序需要与函数声明的返回值类型一致，如demo1.
			[注意：纯类型的返回值对于代码的可读性不是很友好，尤其是在同类型的返回值出现时，无法区分每个返回参数的意义。]
		带有变量的返回值
			Go语言支持对返回值进行命名，这样返回值就和参数一样拥有参数变量名和类型。命名的返回值变量的默认值为类型的默认值。demo2.
		[注意：同一种类型返回值和命名返回值两种形式只能二选一，混用时将会发生编译错误： mixed named and unnamed function parameters]
	函数的调用：
		略...
	函数中的参数传递效果：
		Go语言中传入和返回参数在调用和返回时都使用值传递，这里需要注意的是指针、切片和map等引用型对象指向的内容在参数传递中不会发生复制，而是将指针进行复制，类似于创建一次引用。
*/
package main

import (
	"fmt"
)

func main() {
	demo2()
}

func demo2() {
	a, b := namedRetValues()
	fmt.Println(a, b)
}
func namedRetValues() (a, b int) {
	a = 1
	return a, b
}

func demo1() {
	a, b := typed2Values()
	fmt.Println(a, b)
}

func typed2Values() (int, int) {
	return 1, 2
}
