/*
1. Go是非常年轻的一门语言，它的主要目标是“兼具python等动态语言的开发速度和C/C++等编译型语言的性能与安全性”。
2. Go是编译型语言，编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行Go程序，程序员必须执行一下步骤：
	2.1 使用文本编辑器创建Go程序；
	2.2 保存文件
	2.3 编译程序
	2.4 运行编译得到的可执行文件。
3. Go语言的语言特性
	3.1 语法简单
	3.2 并发模型
	3.3 内存分配
	3.4 垃圾回收
	3.5 静态链接
	3.6 标准库
	3.7 工具链
*/

/*
下面是代码说明：
第 1 行，标记当前文件为 main 包，main 包也是 Go 程序的入口包。
第 3~5 行，导入 net/http 包，这个包的作用是 HTTP 的基础封装和访问。
第 7 行，程序执行的入口函数 main()。
第 8 行，使用 http.FileServer 文件服务器将当前目录作为根目录（/目录）的处理器，访问根目录，就会进入当前目录。
第 9 行，默认的 HTTP 服务侦听在本机 8080 端口。

把这个源码保存为 main.go（Go语言的源文件后缀就是.go），安装Go语言的开发包（后续我们会讲解如何安装），在命令行输入如下命令：
$ go run main.go
在浏览器里输入http://127.0.0.1:8080即可浏览文件，这些文件正是当前目录在HTTP服务器上的映射目录
*/
package main

import (
	"fmt"
	"net/http"
)

func main() {
	fmt.Println("The file name is 00.go")
	http.Handle("/", http.FileServer(http.Dir(".")))
	http.ListenAndServe(":8080", nil)
}

/*
package:声明包名的关键字，name为包名。
Go语言的包与文件夹是一一对应的，它的特点为：
	1. 一个目录下的统计文件属于同一个包
	2. 报名可以与其目录名不同
	3. main包是Go语言程序的入口包，一个Go语言程序必须有且仅有一个main包，如果一个程序没有main包，那么编译时将会出错，无法生成可执行文件。

import:用于导入程序中所依赖的包，导入的报名用双引号""包起来

main函数： 它是Go语言程序的入口函数，也即程序启动后运行的第一个函数，一个mainbao中，有且仅有一个main函数。

func 函数声明：
func 函数名 (参数列表) (返回值列表){
    函数体
}
格式说明如下：
函数名：由字母、数字、下画线_组成，其中，函数名的第一个字母不能为数字，并且，在同一个包内，函数名称不能重名。
参数列表：一个参数由参数变量和参数类型组成，例如 func foo( a int, b string )。
返回值列表：可以是返回值类型列表，也可以是参数列表那样变量名与类型的组合，函数有返回值时，必须在函数体中使用 return 语句返回。
函数体：能够被重复调用的代码片段。

注意：Go语言函数的左大括号{必须和函数名称在同一行，否则会报错。
*/
